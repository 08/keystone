DESCRIPTION
Keystone is a proposed independent authentication service for OpenStack (www.openstack.org).
This initial proof of concept aims to address the current use cases in Swift and Nova which are:
- ReST-based, token auth for Swift
- many-to-many relationship between identity and tenant for Nova.


SERVICES
Keystone - authentication service
PAPIAuth - WSGI middleware that can be used in services (like Swift, Nova, and Glance) to perform authentication
Echo     - A sample service that responds by returning call details


DEPENDENCIES:
* SQLite3
* Paste
* PasteDeploy
* PasteScript
* simplejson
* eventlet
* webob


SETUP:
Install http://pypi.python.org/pypi/setuptools
sudo easy_install [all the above dependencies]


RUNNING:
>> for keystone
python setup.py build
sudo python setup.py install
python identity.py

>> for the test echo
python setup.py build
sudo python setup.py install
python echo.py


Demo - curl commands:
Start server as per run instructions above.

Add Tenant:
curl -i -X POST -H "Content-Type: application/json" -d '{"tenant": { "id": "123456", "description": "A description ...", "enabled": true } }' http://localhost:8080/tenants

Get token:
curl -i -X POST -H "Content-Type: application/json" -d '{"username": "john", "password": "secret" }' http://localhost:8080/tokens
curl -i -X POST -H "Content-Type: application/json" -d '{"username":"jack", "password": "secret","tenant_id":"1" }'http://localhost:8080/tokens

Add User:(Test Function)
curl -i -X POST -H "Content-Type: application/json" -d '{"username": "john", "password": "secret" }' http://localhost:8080/users


Validate good token:
curl -i -X GET -H "Content-Type: application/json"  http://localhost:8080/token/abcdefghijklmnopqrstuvwxy

Validate bad token:
curl -i -X GET -H "Content-Type: application/json"  http://localhost:8080/token/abcdefghijklmnopqrstuvbad


Update Tenant
 curl -i -X PUT -H "Content-Type: application/json" -d '{"tenant": { "description": "A new description update ..." } }' http://localhost:8080/tenants/1234

Get Tenant
 curl -i -X GET -H "Content-Type: application/json" -d '{}' http://localhost:8080/tenants/1234

Get Tenants
 curl -i -X GET -H "Content-Type: application/json" -d '{}' http://localhost:8080/tenants


Delete Tenant
 curl -i -X DELETE -H "Content-Type: application/json" -d '{}' http://localhost:8080/tenants/1234

Create Tenant group:
curl -i -X POST -H "Content-Type: application/json" -d '{"group": { "id": "admin","description":"Administrator" } }' http://localhost:8080/v1.0/tenant/1/groups
Get tenant groups:
curl -i -X GET -H "Content-Type: application/json"  http://localhost:8080/v1.0/tenant/:tenantId/groups

Get Tenant Groups:
curl -i -X GET -H "Content-Type: application/json"  http://localhost:8080/v1.0/tenant/:tenantId/groups/:groupId

Get Group Users:
v1.0/tenants/groups/:groupId/users', method='GET'
curl -i -X GET -H "Content-Type: application/json"  http://localhost:8080/v1.0/tenants/groups/:groupId/users

Add User Tenant Group:
curl -i -X PUT -H "Content-Type: application/json" -d '{"username": "john" }' http://localhost:8080/tenants/123456/groups/user/users

DELETE USER FROM  TENANT GROUP:
curl -i -X DELETE -H "Content-Type: application/json" -d '{"username": "john" }' http://localhost:8080/tenants/123456/groups/user/users


Create a user:
 curl -i -X POST -H "Content-Type: application/json" -d '{"user": {"username": "jacky", "password": "secret","email":"jacky@example.com","enabled": true } }' http://localhost:8080/tenants/111/users


Echo:
Start server with PAPI-Auth Middleware:
python echo.py

 Validate Token:
 curl -i -X GET -H "Content-Type: application/json" -H "X-Auth-Token: fad94013a5b3b836dbc18" -d '{"test": "something"}' http://127.0.0.1:8090/


TESTING
Testing is kinda manual right now...run test_setup.sql to setup the database, then run the soap ui test...run kill.sql before you run test_setup.sql again


Using SOAPUI:

Download SOAPUI: http://sourceforge.net/projects/soapui/files/
To Test Identity Service:
   File->New soapUI Project:
   ProjectName: KeyStone
   Initial WSDL/WADL: keystone/identity.wadl
   [OK]

   Select Request, set parameters, select "Accept"
   SOAP UI works best with XML, it will fill in most parameters for
   in that case.  For JSON, SOAPUI will still help you fill in
   parameters and headers, but that's it.

To Test Echo Service:
   File->New soapUI Project:
   ProjectName: Echo
   Initial WSL/WADL: echo/echo.wadl

ISSUES


DATABASE SCHEMA
CREATE TABLE groups(group_id varchar(255),group_desc varchar(255),tenant_id varchar(255),FOREIGN KEY(tenant_id) REFERENCES tenant(tenant_id));
CREATE TABLE tenants(tenant_id varchar(255), tenant_desc varchar(255), tenant_enabled INTEGER, PRIMARY KEY(tenant_id ASC));
CREATE TABLE token(token_id varchar(255),user_id varchar(255),expires datetime,tenant_id varchar(255));
CREATE TABLE user_group(user_id varchar(255),group_id varchar(255), FOREIGN KEY(user_id) REFERENCES user(id), FOREIGN KEY(group_id) REFERENCES groups(group_id));
CREATE TABLE user_tenant(tenant_id varchar(255),user_id varchar(255),FOREIGN KEY(tenant_id) REFERENCES tenant(tenant_id),FOREIGN KEY(user_id) REFERENCES user(id));
CREATE TABLE users(id varchar(255),password varchar(255),email varchar(255),enabled integer);
