Auth Server is the Keystone which replace bottle totally with
eventlet. A copy of the template classes in bottle is copied and
placed is common is template.py.  This needs to be replaced with a
perhaps moe widely used  templating module.

In addition, daemonization code is copied from glance project and added.


Starting and Stopping Auth Server
---------------------------------

From the topdir 

bin/keystone-control --config-file etc/keystone.conf --pid-file=pidfile auth <start|stop|restart>

The "start" command invokes bin/keystone-auth. During  development you can also run

bin/keystone-auth etc/keystone.conf


The first time you run keystone-auth, a sqlite database keystone.db is created in keystone directory. After it is created run

sqlite3 keystone/keystone.db < test/test_setup.sql


Running the Tests
-----------------

cd test/unit

grep class test_identity.py lists all the tests in the file

Right now you get 


class identity_test(unittest.TestCase):
class authorize_test(identity_test):
class validate_token(authorize_test):
class tenant_test(unittest.TestCase):
class create_tenant_test(tenant_test):
class get_tenants_test(tenant_test):
class get_tenant_test(tenant_test):
class update_tenant_test(tenant_test):
class delete_tenant_test(tenant_test):
class tenant_group_test(unittest.TestCase):
class create_tenant_group_test(tenant_group_test):
class get_tenant_groups_test(tenant_group_test):
class get_tenant_group_test(tenant_group_test):
class update_tenant_group_test(tenant_group_test):
class delete_tenant_group_test(tenant_test):
class global_group_test(unittest.TestCase):
class create_global_group_test(global_group_test):
class create_tenant_group_test(tenant_group_test):


You can run all of the tests with 

python test_identity.py 

You can run any subset of the test by giving the class name e.g.

python test_identity.py delete_tenant_test