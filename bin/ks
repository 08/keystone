#!/usr/bin/env python

import os
import sys

import cli.app
import cli.log

# If ../../keystone/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir,
                               'keystone',
                               '__init__.py')):
    sys.path.insert(0, possible_topdir)


from keystone import config
from keystone import utils


CONF = config.CONF


class BaseApp(cli.log.LoggingApp):
  def __init__(self, *args, **kw):
    kw.setdefault('name', self.__class__.__name__.lower())
    super(BaseApp, self).__init__(*args, **kw)

  def add_default_params(self):
    for args, kw in DEFAULT_PARAMS:
      self.add_param(*args, **kw)

  def _parse_keyvalues(self, args):
    kv = {}
    for x in args:
      key, value = x.split('=', 1)
      # make lists if there are multiple values
      if key.endswith('[]'):
        key = key[:-2]
        existing = kv.get(key, [])
        existing.append(value)
        kv[key] = existing
      else:
        kv[key] = value
    return kv


class DbSync(BaseApp):
  name = 'db_sync'

  def __init__(self, *args, **kw):
    super(DbSync, self).__init__(*args, **kw)

  def main(self):
    for k in ['identity', 'catalog', 'policy', 'token']:
      driver = utils.import_object(getattr(CONF, k).driver)
      if hasattr(driver, 'db_sync'):
        driver.db_sync()


CMDS = {'db_sync': DbSync,
        }


if __name__ == '__main__':
  dev_conf = os.path.join(possible_topdir,
                          'etc',
                          'keystone.conf')
  config_files = None
  if os.path.exists(dev_conf):
      config_files = [dev_conf]

  args = CONF(config_files=config_files, args=sys.argv)
  cmd = args[1]
  if cmd in CMDS:
    CMDS[cmd](argv=(args[:1] + args[2:])).run()
