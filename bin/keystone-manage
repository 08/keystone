#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Keystone Identity Server - CLI Management Interface
"""

import optparse
import os
import sys

# If ../../keystone/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'keystone', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from keystone import version
from keystone.common import config
import keystone.db.sqlalchemy.api as db_api
import keystone.db.sqlalchemy.models as db_models


def Main():
    # Parse options (command-line arguments and config file)
    parser = optparse.OptionParser(version='%%prog %s'
                                    % version.version_string())
    common_group = config.add_common_options(parser)
    config.add_log_options(parser)
    (options, args) = config.parse_options(parser)
    
    if len(args) <> 4:
        print "Usage: keystone-manage [options] type command id [attributes]"
        print "  type       : user (more to come)"
        print "  command    : add (more to come)"
        print "  id         : user name"
        print "  attributes : password"
        print "\noptions"
        print "  -c | --config-file : config file to use"
        print "  -d | --debug : debug mode"
        print "\nExample: keystone-manage add user Admin P@ssw0rd"
        return

    object_type = args[0]
    command = args[1]
    object_id = args[2]
    password = args[3]

    if command == "add" and object_type == "user":
        try:
            config_file, conf = config.load_paste_config('admin', options, args)
            print "Config file in use: %s" % config_file
            config.setup_logging(options, conf)
            
            db_api.configure_db(conf)

            duser = db_models.User()
            duser.id = object_id
            duser.password = password
            duser.enabled = True
            db_api.user_create(duser)
            print "User created successfully. ID=%s" % duser.id
        except Exception as exc:
            print "ERROR: Failed to create user: %s" % exc

    else:
        print ("Fail: only user add supported right now."
                "You entered %s %s" % (object_type, command))


if __name__ == '__main__':
    Main()
